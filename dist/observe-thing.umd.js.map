{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 487d15aa01c4b86387ab","webpack:///./observable.js","webpack:///./index.js","webpack:///./observer.js","webpack:///./event-observable.js"],"names":["Observable","observers","active","value","notifyObservers","observer","update","fn","newObserver","Observer","push","subscription","EventObservable","event","element","handler","bind","listener","addEventListener","ev","next","removeEventListener"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;AC7DA;;;;;;;IAOaA,U,WAAAA,U;AACX,wBAAc;AAAA;;AACZ,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,MAAL,GAAc,IAAd;AACD;;AAED;;;;;yBACKC,K,EAAO;AACV,UAAI,KAAKD,MAAT,EAAiB;AACf,aAAKE,eAAL,CAAqBD,KAArB;AACD;AACF;;AAED;;;;oCACgBA,K,EAAO;AAAA;AAAA;AAAA;;AAAA;AACrB,6BAAqB,KAAKF,SAA1B,8HAAqC;AAAA,cAA5BI,QAA4B;;AACnCA,mBAASC,MAAT,CAAgBH,KAAhB;AACD;AAHoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAItB;;AAED;AACA;AACA;AACA;;;;8BACUI,E,EAAI;AACZ,UAAIC,cAAc,IAAIC,QAAJ,CAAaF,EAAb,CAAlB;AACA,WAAKN,SAAL,CAAeS,IAAf,CAAoBF,WAApB;AACA,aAAOA,WAAP;AACD;;AAED;AACA;AACA;AACA;AACA;;;;kCACc;AACZ,WAAKN,MAAL,GAAc,KAAd;AACA,WAAKD,SAAL,GAAiB,IAAjB;AACD;;;;;;;;;;;;;;;;;;;AC7CH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;;;;;;;;;;;;;;ACFA;;;;;IAKaQ,Q,WAAAA,Q;AACX,oBAAYF,EAAZ,EAAgB;AAAA;;AACd,SAAKI,YAAL,GAAoBJ,EAApB;AACA,SAAKL,MAAL,GAAc,IAAd;AACD;;AAED;AACA;;;;;2BACOC,K,EAAO;AACZ,UAAI,KAAKD,MAAT,EAAiB;AACf,aAAKS,YAAL,CAAkBR,KAAlB;AACD;AACF;;AAED;AACA;AACA;;;;kCACc;AACZ,WAAKD,MAAL,GAAc,KAAd;AACD;;;;;;;;;;;;;;;;;;;;;;ACxBH;;;;;;;;AAEA;;;;IAIaU,e,WAAAA,e;;;AACX,2BAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAE1B;AAF0B;;AAG1B,UAAKD,KAAL,GAAaA,KAAb;AACA;AACA,UAAKE,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,OAAf;AACA,UAAKC,QAAL,GAAgBH,QAAQI,gBAAR,CAAyB,MAAKL,KAA9B,EAAqC,MAAKE,OAA1C,CAAhB;AAN0B;AAO3B;;AAED;;;;;4BACQI,E,EAAI;AACV,WAAKC,IAAL,CAAUD,EAAV;AACD;;AAED;AACA;AACA;;;;kCACc;AACZ;AACA,WAAKF,QAAL,CAAcI,mBAAd,CAAkC,KAAKR,KAAvC,EAA8C,KAAKE,OAAnD;AACD","file":"observe-thing.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"observe-thing\"] = factory();\n\telse\n\t\troot[\"observe-thing\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 487d15aa01c4b86387ab","/*\n * base class that recives updated values through it's next() method\n * and dispatches them through it's notifyObservers() method\n * The Observable instance keeps a list of all subscribed Observers,\n * and attempts to notify them when a new value is provided. It's up\n * to each Observer to decide how to handle the message\n */\nexport class Observable {\n  constructor() {\n    this.observers = [];\n    this.active = true;\n  }\n  \n  // recives the next value and trys to notifyObservers\n  next(value) {\n    if (this.active) {\n      this.notifyObservers(value);\n    }\n  }\n  \n  // simple loop through each observer and call it's .update() method\n  notifyObservers(value) {\n    for (let observer of this.observers) {\n      observer.update(value);\n    }\n  }\n  \n  // instnatiates a new Observer with the provided function and adds it to the list\n  // also returns the new instance so it can be retained and unsubscribed from\n  // for more flexiblity this should also allow already instantiated Obsever instances\n  // in addition to just functions\n  subscribe(fn) {\n    let newObserver = new Observer(fn);\n    this.observers.push(newObserver);\n    return newObserver;\n  }\n  \n  // similar pattern with unsubscribe setting active true/false\n  // but here it's a little more \"permenant\" since it removes the\n  // references to the observers. If we wanted this to be a resumable\n  // Observable we could move the nullification to a .destroy() method\n  // and just de-activate notification here\n  unsubscribe() {\n    this.active = false;\n    this.observers = null;\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./observable.js","export * from \"./observable\";\nexport * from \"./observer\";\nexport * from \"./event-observable\";\n\n\n\n// WEBPACK FOOTER //\n// ./index.js","/*\n * this handles calling the subscribed callbacks with updated values\n * and unsubscribing from updates\n * Observers are instantiated and maintained by Observables\n */\nexport class Observer {\n  constructor(fn) {\n    this.subscription = fn;\n    this.active = true;\n  }\n  \n  // called by an observable to propagate new values\n  // this will be called [0, n] times by the Observable\n  update(value) {\n    if (this.active) {\n      this.subscription(value);\n    }\n  }\n  \n  // unsubscribe just prevents update from calling our subscribed function\n  // this way we don't have to worry about the state in the Observable\n  // and could allow us to resume reciving updates if needed\n  unsubscribe() {\n    this.active = false;\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./observer.js","import { Observable } from \"./observable\";\n\n/*\n * a specialization of an Observable that takes an event name (click, keyup, etc)\n * and an element, sets up a listener, and provides the event as the Observable .next() value\n */\nexport class EventObservable extends Observable {\n  constructor(event, element) {\n    super();\n    // keep the event so we can remove the listener\n    this.event = event;\n    // re-bind the handler so we keep the right this\n    this.handler = this.handler.bind(this);\n    this.listener = element.addEventListener(this.event, this.handler);\n  }\n  \n  // seperate handler function that propagates events to .next()\n  handler(ev) {\n    this.next(ev);\n  }\n  \n  // again, we go all out in the Observable unsubscribe - we remove the listener\n  // the Observers don't care about this, they just stop listening when they\n  // unsubscribe\n  unsubscribe() {\n    super.unsubscribe();\n    this.listener.removeEventListener(this.event, this.handler);\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./event-observable.js"],"sourceRoot":""}